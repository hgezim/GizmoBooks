# had to rename this file from registration.py to reg.py due to name conflicts with registration app

from django.contrib.sites.models import RequestSite, Site
from django.contrib.auth.models import User
from django.http import HttpResponseRedirect
from django.core.urlresolvers import reverse
from django.contrib.sites.models import Site
from django.template.loader import render_to_string
from django.conf import settings

from registration import signals 
from registration.backends.default import DefaultBackend
from registration.models import RegistrationProfile

from accounts.forms import RegisterForm, SavePasswordsForm
from accounts.utils import generate_username_from_email

class EmailRegistrationBackend(DefaultBackend):
    """A registration backend that allows user to register with email, password.
    
    A username is automatically generated by taking the name part of the email address.
    If the name already exists as a username, it will append a unique number to it.
    An email is sent for the user to confirm their email address.
    Once the user authenticates with the emailed link, they're automatically logged in.
    """
    
    def register(self, request, **kwargs):
        """
        Create a user based on the email.
        
        """
        email, password = kwargs['email'], kwargs['password']
        
        username = generate_username_from_email(email)

        # get website
        if Site._meta.installed:
            site = Site.objects.get_current()
        else:
            site = RequestSite(request)

        new_user = RegistrationProfile.objects.create_inactive_user(username, email,
                                                                    password, site, send_email=False)
        signals.user_registered.send(sender=self.__class__,
                                     user=new_user,
                                     request=request)
        return new_user
        
    def get_form_class(self, request):
        return RegisterForm
    
    
class SavePasswordRegistrationBackend(DefaultBackend):
    """A registration backend that allows the user to register by just providing the password.
    
    This used if a user chooses to create an account after posting a book. The email and user_hash
    are used to verify that the user is who they say. These (email and hash) are stored in the session and
    checked against RegistrationProfile.
    The username is automatically generated based on the email.
    """
    
    def register(self, request, **kwargs):
        """Set new password for user."""

        user = None
        if request.session.get('user_email', False) \
            and request.session.get('user_hash', False):
            
            try:
                user = User.objects.get(email=request.session['user_email'])
            except:
                return HttpResponseRedirect('main')
            hash = request.session.get('user_hash', False)
            
            if hash != RegistrationProfile.objects.get(user=user).creation_hash:
                return HttpResponseRedirect('main')
            
            # match occurred, remove session variables
            del request.session['user_hash']
            del request.session['user_email']
            
            password = kwargs['password']
            user.set_password(password)
            user.save()
            
            signals.user_registered.send(sender=None,
                                         user=user,
                                         request=None)
            
            # email the user
            emailContext = {'site': Site.objects.get_current(),
                            'activation_key': user.registrationprofile_set.all()[0].activation_key
                            }
            subject = render_to_string('accounts/activate_account_subject.txt', emailContext)
            subject = ''.join(subject.splitlines())
            message = render_to_string('accounts/activate_account_message.txt', emailContext)
            user.email_user(subject, message, settings.CONFIRM_FROM_EMAIL)
                    
        else:
            return None
        
        return user        

    def get_form_class(self, request):
        return SavePasswordsForm
    
    def post_registration_redirect(self, request, user, *args, **kwargs):
        return (reverse('registration_complete'), args, kwargs,)
